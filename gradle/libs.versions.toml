[versions]
kotlinVersion = "2.1.20"
kotlinKspVersion = "2.1.20-2.0.1"
ktorVersion = "3.1.2"
assertJVersion = "3.27.3"
binaryCompatibilityValidatorVersion = "0.17.0"
classGraphVersion = "4.8.179"
commonsCodecVersion = "1.18.0"
commonVersion = "1.10.1"
avroVersion = "1.11.4"
exposedVersion = "0.61.0"
flywayVersion = "11.8.0"
hamkrestVersion = "1.8.0.1"
hikariVersion = "6.3.0"
jacksonJsr310Version = "2.19.0"
jupiterVersion = "5.12.2"
kotlinxHtmlVersion = "0.12.0"
logbackVersion = "1.5.18"
logstashVersion = "8.1"
micrometerVersion = "1.14.6"
mockkVersion = "1.14.2"
postgresqlVersion = "42.7.3"
testcontainersPostgresqlVersion = "1.21.0"
unleashVersion = "10.2.2"
kafkaVersion="3.9.0"

[plugins]
ktor = { id = "io.ktor.plugin", version.ref = "ktorVersion" }
ksp = { id = "com.google.devtools.ksp", version.ref = "kotlinKspVersion" }
binary-compatibility-validator = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref="binaryCompatibilityValidatorVersion" }

[libraries]
brevbaker-common = { module = "no.nav.pensjon.brevbaker:brevbaker-api-model-common", version.ref = "commonVersion" }
commons-codec = { module = "commons-codec:commons-codec", version.ref = "commonsCodecVersion" }
hikari-cp = { module = "com.zaxxer:HikariCP", version.ref = "hikariVersion" }
io-github-classgraph = { module = "io.github.classgraph:classgraph", version.ref = "classGraphVersion" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jacksonJsr310Version" }
kotlinx-html = { module = "org.jetbrains.kotlinx:kotlinx-html-jvm", version.ref = "kotlinxHtmlVersion" }
ksp-symbol-processing-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "kotlinKspVersion"}
ksp-symbol-processing-aa = { module = "com.google.devtools.ksp:symbol-processing-aa", version.ref = "kotlinKspVersion"}
ksp-symbol-processing-common = { module = "com.google.devtools.ksp:symbol-processing-common-deps", version.ref = "kotlinKspVersion"}
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logbackVersion" }
logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashVersion" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometerVersion" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresqlVersion" }
unleash = { module = "io.getunleash:unleash-client-java", version.ref = "unleashVersion" }
avro = {module = "org.apache.avro:avro", version.ref = "avroVersion"}
avro-tools = {module = "org.apache.avro:avro-tools", version.ref = "avroVersion"}

# Ktor
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktorVersion" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktorVersion" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktorVersion" }
ktor-client-encoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktorVersion" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktorVersion" }
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktorVersion" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktorVersion" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktorVersion" }
ktor-server-caching-headers = { module = "io.ktor:ktor-server-caching-headers", version.ref = "ktorVersion" }
ktor-server-caching-headers-jvm = { module = "io.ktor:ktor-server-caching-headers-jvm", version.ref = "ktorVersion"}
ktor-server-callId = { module = "io.ktor:ktor-server-call-id", version.ref = "ktorVersion" }
ktor-server-callLogging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktorVersion" }
ktor-server-compression-jvm = { module = "io.ktor:ktor-server-compression-jvm", version.ref = "ktorVersion" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktorVersion" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktorVersion" }
ktor-server-core-jvm = { module = "io.ktor:ktor-server-core-jvm", version.ref = "ktorVersion" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktorVersion" }
ktor-server-metrics = { module = "io.ktor:ktor-server-metrics", version.ref = "ktorVersion" }
ktor-server-metrics-micrometer = { module = "io.ktor:ktor-server-metrics-micrometer", version.ref = "ktorVersion" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktorVersion" }
ktor-server-netty-jvm = { module = "io.ktor:ktor-server-netty-jvm", version.ref = "ktorVersion" }
ktor-server-request-validation = { module = "io.ktor:ktor-server-auth", version.ref = "ktorVersion" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktorVersion" }
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger", version.ref = "ktorVersion" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktorVersion" }

# Kafka
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafkaVersion" }
connect-runtime = { module = "org.apache.kafka:connect-runtime", version.ref = "kafkaVersion" }

# Exposed
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposedVersion" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposedVersion" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposedVersion" }
exposed-json = { module = "org.jetbrains.exposed:exposed-json", version.ref = "exposedVersion" }
exposed-java-time = { module = "org.jetbrains.exposed:exposed-java-time", version.ref = "exposedVersion" }

# Flyway
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flywayVersion" }
flyway-database-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flywayVersion" }

# Test
assertJ = { module = "org.assertj:assertj-core", version.ref = "assertJVersion" }
hamkrest = { module = "com.natpryce:hamkrest", version.ref = "hamkrestVersion" }
junit-bom = { group = "org.junit", name = "junit-bom", version.ref = "jupiterVersion" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter",  version.ref = "jupiterVersion" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher",  version = "1.12.2" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlinVersion" }
mockk = { module = "io.mockk:mockk", version.ref = "mockkVersion" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainersPostgresqlVersion"}

[bundles]
junit = ["junit-jupiter", "junit-platform-launcher"]
logging = ["logback-classic", "logback-encoder"]
metrics = ["micrometer-prometheus", "ktor-server-metrics", "ktor-server-metrics-micrometer"]