/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TemplatesImport } from './routes/templates'
import { Route as IndexImport } from './routes/index'
import { Route as TestNavnImport } from './routes/test.$navn'
import { Route as TemplateMalTypeTemplateIdImport } from './routes/template.$malType.$templateId'

// Create/Update Routes

const TemplatesRoute = TemplatesImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestNavnRoute = TestNavnImport.update({
  id: '/test/$navn',
  path: '/test/$navn',
  getParentRoute: () => rootRoute,
} as any)

const TemplateMalTypeTemplateIdRoute = TemplateMalTypeTemplateIdImport.update({
  id: '/template/$malType/$templateId',
  path: '/template/$malType/$templateId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/templates': {
      id: '/templates'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesImport
      parentRoute: typeof rootRoute
    }
    '/test/$navn': {
      id: '/test/$navn'
      path: '/test/$navn'
      fullPath: '/test/$navn'
      preLoaderRoute: typeof TestNavnImport
      parentRoute: typeof rootRoute
    }
    '/template/$malType/$templateId': {
      id: '/template/$malType/$templateId'
      path: '/template/$malType/$templateId'
      fullPath: '/template/$malType/$templateId'
      preLoaderRoute: typeof TemplateMalTypeTemplateIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/templates': typeof TemplatesRoute
  '/test/$navn': typeof TestNavnRoute
  '/template/$malType/$templateId': typeof TemplateMalTypeTemplateIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/templates': typeof TemplatesRoute
  '/test/$navn': typeof TestNavnRoute
  '/template/$malType/$templateId': typeof TemplateMalTypeTemplateIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/templates': typeof TemplatesRoute
  '/test/$navn': typeof TestNavnRoute
  '/template/$malType/$templateId': typeof TemplateMalTypeTemplateIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/templates'
    | '/test/$navn'
    | '/template/$malType/$templateId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/templates' | '/test/$navn' | '/template/$malType/$templateId'
  id:
    | '__root__'
    | '/'
    | '/templates'
    | '/test/$navn'
    | '/template/$malType/$templateId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TemplatesRoute: typeof TemplatesRoute
  TestNavnRoute: typeof TestNavnRoute
  TemplateMalTypeTemplateIdRoute: typeof TemplateMalTypeTemplateIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TemplatesRoute: TemplatesRoute,
  TestNavnRoute: TestNavnRoute,
  TemplateMalTypeTemplateIdRoute: TemplateMalTypeTemplateIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/templates",
        "/test/$navn",
        "/template/$malType/$templateId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/templates": {
      "filePath": "templates.tsx"
    },
    "/test/$navn": {
      "filePath": "test.$navn.tsx"
    },
    "/template/$malType/$templateId": {
      "filePath": "template.$malType.$templateId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
